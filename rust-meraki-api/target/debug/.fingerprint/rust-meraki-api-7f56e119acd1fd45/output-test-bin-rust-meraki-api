{"message":"unused variable: `json`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":990,"byte_end":994,"line_start":37,"line_end":37,"column_start":9,"column_end":13,"is_primary":true,"text":[{"text":"    let json: serde_json::Value = serde_json::from_str(&data)?;","highlight_start":9,"highlight_end":13}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_variables)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":990,"byte_end":994,"line_start":37,"line_end":37,"column_start":9,"column_end":13,"is_primary":true,"text":[{"text":"    let json: serde_json::Value = serde_json::from_str(&data)?;","highlight_start":9,"highlight_end":13}],"label":null,"suggested_replacement":"_json","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `json`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:37:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let json: serde_json::Value = serde_json::from_str(&data)?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_json`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_variables)]` on by default\u001b[0m\n\n"}
{"message":"unused variable: `json`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":1996,"byte_end":2000,"line_start":73,"line_end":73,"column_start":9,"column_end":13,"is_primary":true,"text":[{"text":"    let json: serde_json::Value = serde_json::from_str(&data)?;","highlight_start":9,"highlight_end":13}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":1996,"byte_end":2000,"line_start":73,"line_end":73,"column_start":9,"column_end":13,"is_primary":true,"text":[{"text":"    let json: serde_json::Value = serde_json::from_str(&data)?;","highlight_start":9,"highlight_end":13}],"label":null,"suggested_replacement":"_json","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `json`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:73:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m73\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let json: serde_json::Value = serde_json::from_str(&data)?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_json`\u001b[0m\n\n"}
{"message":"unused variable: `json`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":3164,"byte_end":3168,"line_start":116,"line_end":116,"column_start":9,"column_end":13,"is_primary":true,"text":[{"text":"    let json: serde_json::Value = serde_json::from_str(&data)?;","highlight_start":9,"highlight_end":13}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":3164,"byte_end":3168,"line_start":116,"line_end":116,"column_start":9,"column_end":13,"is_primary":true,"text":[{"text":"    let json: serde_json::Value = serde_json::from_str(&data)?;","highlight_start":9,"highlight_end":13}],"label":null,"suggested_replacement":"_json","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `json`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:116:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m116\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let json: serde_json::Value = serde_json::from_str(&data)?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_json`\u001b[0m\n\n"}
{"message":"unused variable: `json`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":13116,"byte_end":13120,"line_start":461,"line_end":461,"column_start":9,"column_end":13,"is_primary":true,"text":[{"text":"    let json: serde_json::Value = serde_json::from_str(&data)?;","highlight_start":9,"highlight_end":13}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":13116,"byte_end":13120,"line_start":461,"line_end":461,"column_start":9,"column_end":13,"is_primary":true,"text":[{"text":"    let json: serde_json::Value = serde_json::from_str(&data)?;","highlight_start":9,"highlight_end":13}],"label":null,"suggested_replacement":"_json","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `json`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:461:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m461\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let json: serde_json::Value = serde_json::from_str(&data)?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_json`\u001b[0m\n\n"}
{"message":"unused variable: `json`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":16794,"byte_end":16798,"line_start":585,"line_end":585,"column_start":9,"column_end":13,"is_primary":true,"text":[{"text":"    let json: serde_json::Value = serde_json::from_str(&data)?;","highlight_start":9,"highlight_end":13}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":16794,"byte_end":16798,"line_start":585,"line_end":585,"column_start":9,"column_end":13,"is_primary":true,"text":[{"text":"    let json: serde_json::Value = serde_json::from_str(&data)?;","highlight_start":9,"highlight_end":13}],"label":null,"suggested_replacement":"_json","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `json`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:585:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m585\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let json: serde_json::Value = serde_json::from_str(&data)?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_json`\u001b[0m\n\n"}
{"message":"unused variable: `json`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":20537,"byte_end":20541,"line_start":708,"line_end":708,"column_start":9,"column_end":13,"is_primary":true,"text":[{"text":"    let json: serde_json::Value = serde_json::from_str(&data)?;","highlight_start":9,"highlight_end":13}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":20537,"byte_end":20541,"line_start":708,"line_end":708,"column_start":9,"column_end":13,"is_primary":true,"text":[{"text":"    let json: serde_json::Value = serde_json::from_str(&data)?;","highlight_start":9,"highlight_end":13}],"label":null,"suggested_replacement":"_json","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `json`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:708:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m708\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let json: serde_json::Value = serde_json::from_str(&data)?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_json`\u001b[0m\n\n"}
{"message":"constant `serial` should have an upper case name","code":{"code":"non_upper_case_globals","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":150,"byte_end":156,"line_start":7,"line_end":7,"column_start":7,"column_end":13,"is_primary":true,"text":[{"text":"const serial: &str = \"\";","highlight_start":7,"highlight_end":13}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(non_upper_case_globals)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"convert the identifier to upper case","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":150,"byte_end":156,"line_start":7,"line_end":7,"column_start":7,"column_end":13,"is_primary":true,"text":[{"text":"const serial: &str = \"\";","highlight_start":7,"highlight_end":13}],"label":null,"suggested_replacement":"SERIAL","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: constant `serial` should have an upper case name\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:7:7\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mconst serial: &str = \"\";\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to upper case: `SERIAL`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(non_upper_case_globals)]` on by default\u001b[0m\n\n"}
{"message":"constant `organizationId` should have an upper case name","code":{"code":"non_upper_case_globals","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":175,"byte_end":189,"line_start":8,"line_end":8,"column_start":7,"column_end":21,"is_primary":true,"text":[{"text":"const organizationId: &str = \"\";","highlight_start":7,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to upper case","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":175,"byte_end":189,"line_start":8,"line_end":8,"column_start":7,"column_end":21,"is_primary":true,"text":[{"text":"const organizationId: &str = \"\";","highlight_start":7,"highlight_end":21}],"label":null,"suggested_replacement":"ORGANIZATION_ID","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: constant `organizationId` should have an upper case name\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:8:7\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mconst organizationId: &str = \"\";\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to upper case: `ORGANIZATION_ID`\u001b[0m\n\n"}
{"message":"constant `networkId` should have an upper case name","code":{"code":"non_upper_case_globals","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":208,"byte_end":217,"line_start":9,"line_end":9,"column_start":7,"column_end":16,"is_primary":true,"text":[{"text":"const networkId: &str = \"\";","highlight_start":7,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to upper case","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":208,"byte_end":217,"line_start":9,"line_end":9,"column_start":7,"column_end":16,"is_primary":true,"text":[{"text":"const networkId: &str = \"\";","highlight_start":7,"highlight_end":16}],"label":null,"suggested_replacement":"NETWORK_ID","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: constant `networkId` should have an upper case name\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:9:7\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mconst networkId: &str = \"\";\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to upper case: `NETWORK_ID`\u001b[0m\n\n"}
{"message":"constant `SSID_Num` should have an upper case name","code":{"code":"non_upper_case_globals","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":236,"byte_end":244,"line_start":10,"line_end":10,"column_start":7,"column_end":15,"is_primary":true,"text":[{"text":"const SSID_Num: &str = \"\";","highlight_start":7,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to upper case","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":236,"byte_end":244,"line_start":10,"line_end":10,"column_start":7,"column_end":15,"is_primary":true,"text":[{"text":"const SSID_Num: &str = \"\";","highlight_start":7,"highlight_end":15}],"label":null,"suggested_replacement":"SSID_NUM","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: constant `SSID_Num` should have an upper case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:10:7\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mconst SSID_Num: &str = \"\";\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to upper case: `SSID_NUM`\u001b[0m\n\n"}
{"message":"function `createOrganizationNetwork` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":287,"byte_end":312,"line_start":13,"line_end":13,"column_start":10,"column_end":35,"is_primary":true,"text":[{"text":"async fn createOrganizationNetwork() -> Result<(), Box<dyn std::error::Error>> {","highlight_start":10,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(non_snake_case)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":287,"byte_end":312,"line_start":13,"line_end":13,"column_start":10,"column_end":35,"is_primary":true,"text":[{"text":"async fn createOrganizationNetwork() -> Result<(), Box<dyn std::error::Error>> {","highlight_start":10,"highlight_end":35}],"label":null,"suggested_replacement":"create_organization_network","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function `createOrganizationNetwork` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:13:10\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0masync fn createOrganizationNetwork() -> Result<(), Box<dyn std::error::Error>> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `create_organization_network`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(non_snake_case)]` on by default\u001b[0m\n\n"}
{"message":"function `combineOrganizationNetworks` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":1431,"byte_end":1458,"line_start":55,"line_end":55,"column_start":10,"column_end":37,"is_primary":true,"text":[{"text":"async fn combineOrganizationNetworks() -> Result<(), Box<dyn std::error::Error>> {","highlight_start":10,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":1431,"byte_end":1458,"line_start":55,"line_end":55,"column_start":10,"column_end":37,"is_primary":true,"text":[{"text":"async fn combineOrganizationNetworks() -> Result<(), Box<dyn std::error::Error>> {","highlight_start":10,"highlight_end":37}],"label":null,"suggested_replacement":"combine_organization_networks","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function `combineOrganizationNetworks` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:55:10\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m55\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0masync fn combineOrganizationNetworks() -> Result<(), Box<dyn std::error::Error>> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `combine_organization_networks`\u001b[0m\n\n"}
{"message":"function `createOrganization` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":2423,"byte_end":2441,"line_start":91,"line_end":91,"column_start":10,"column_end":28,"is_primary":true,"text":[{"text":"async fn createOrganization() -> Result<(), Box<dyn std::error::Error>> {","highlight_start":10,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":2423,"byte_end":2441,"line_start":91,"line_end":91,"column_start":10,"column_end":28,"is_primary":true,"text":[{"text":"async fn createOrganization() -> Result<(), Box<dyn std::error::Error>> {","highlight_start":10,"highlight_end":28}],"label":null,"suggested_replacement":"create_organization","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function `createOrganization` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:91:10\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m91\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0masync fn createOrganization() -> Result<(), Box<dyn std::error::Error>> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `create_organization`\u001b[0m\n\n"}
{"message":"function `getDeviceSwitchPorts` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":3565,"byte_end":3585,"line_start":134,"line_end":134,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"async fn getDeviceSwitchPorts() -> Result<(), Box<dyn std::error::Error>> {","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":3565,"byte_end":3585,"line_start":134,"line_end":134,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"async fn getDeviceSwitchPorts() -> Result<(), Box<dyn std::error::Error>> {","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":"get_device_switch_ports","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function `getDeviceSwitchPorts` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:134:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m134\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0masync fn getDeviceSwitchPorts() -> Result<(), Box<dyn std::error::Error>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `get_device_switch_ports`\u001b[0m\n\n"}
{"message":"function `getOrganizationSwitchPortsBySwitch` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":4195,"byte_end":4229,"line_start":156,"line_end":156,"column_start":10,"column_end":44,"is_primary":true,"text":[{"text":"async fn getOrganizationSwitchPortsBySwitch() -> Result<(), Box<dyn std::error::Error>> {","highlight_start":10,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":4195,"byte_end":4229,"line_start":156,"line_end":156,"column_start":10,"column_end":44,"is_primary":true,"text":[{"text":"async fn getOrganizationSwitchPortsBySwitch() -> Result<(), Box<dyn std::error::Error>> {","highlight_start":10,"highlight_end":44}],"label":null,"suggested_replacement":"get_organization_switch_ports_by_switch","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function `getOrganizationSwitchPortsBySwitch` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:156:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m156\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0masync fn getOrganizationSwitchPortsBySwitch() -> Result<(), Box<dyn std::error::Error>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `get_organization_switch_ports_by_switch`\u001b[0m\n\n"}
{"message":"function `getDeviceSwitchPort` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":4833,"byte_end":4852,"line_start":178,"line_end":178,"column_start":10,"column_end":29,"is_primary":true,"text":[{"text":"async fn getDeviceSwitchPort() -> Result<(), Box<dyn std::error::Error>> {","highlight_start":10,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":4833,"byte_end":4852,"line_start":178,"line_end":178,"column_start":10,"column_end":29,"is_primary":true,"text":[{"text":"async fn getDeviceSwitchPort() -> Result<(), Box<dyn std::error::Error>> {","highlight_start":10,"highlight_end":29}],"label":null,"suggested_replacement":"get_device_switch_port","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function `getDeviceSwitchPort` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:178:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m178\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0masync fn getDeviceSwitchPort() -> Result<(), Box<dyn std::error::Error>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `get_device_switch_port`\u001b[0m\n\n"}
{"message":"function `getOrganizations` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":5433,"byte_end":5449,"line_start":200,"line_end":200,"column_start":10,"column_end":26,"is_primary":true,"text":[{"text":"async fn getOrganizations() -> Result<(), Box<dyn std::error::Error>> {","highlight_start":10,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":5433,"byte_end":5449,"line_start":200,"line_end":200,"column_start":10,"column_end":26,"is_primary":true,"text":[{"text":"async fn getOrganizations() -> Result<(), Box<dyn std::error::Error>> {","highlight_start":10,"highlight_end":26}],"label":null,"suggested_replacement":"get_organizations","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function `getOrganizations` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:200:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m200\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0masync fn getOrganizations() -> Result<(), Box<dyn std::error::Error>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `get_organizations`\u001b[0m\n\n"}
{"message":"function `getOrganizationDevices` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":5938,"byte_end":5960,"line_start":219,"line_end":219,"column_start":10,"column_end":32,"is_primary":true,"text":[{"text":"async fn getOrganizationDevices() -> Result<(), Box<dyn std::error::Error>> {","highlight_start":10,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":5938,"byte_end":5960,"line_start":219,"line_end":219,"column_start":10,"column_end":32,"is_primary":true,"text":[{"text":"async fn getOrganizationDevices() -> Result<(), Box<dyn std::error::Error>> {","highlight_start":10,"highlight_end":32}],"label":null,"suggested_replacement":"get_organization_devices","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function `getOrganizationDevices` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:219:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m219\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0masync fn getOrganizationDevices() -> Result<(), Box<dyn std::error::Error>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `get_organization_devices`\u001b[0m\n\n"}
{"message":"function `getDeviceSwitchPortsStatuses` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":6577,"byte_end":6605,"line_start":241,"line_end":241,"column_start":10,"column_end":38,"is_primary":true,"text":[{"text":"async fn getDeviceSwitchPortsStatuses() -> Result<(), Box<dyn std::error::Error>> {","highlight_start":10,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":6577,"byte_end":6605,"line_start":241,"line_end":241,"column_start":10,"column_end":38,"is_primary":true,"text":[{"text":"async fn getDeviceSwitchPortsStatuses() -> Result<(), Box<dyn std::error::Error>> {","highlight_start":10,"highlight_end":38}],"label":null,"suggested_replacement":"get_device_switch_ports_statuses","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function `getDeviceSwitchPortsStatuses` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:241:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m241\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0masync fn getDeviceSwitchPortsStatuses() -> Result<(), Box<dyn std::error::Error>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `get_device_switch_ports_statuses`\u001b[0m\n\n"}
{"message":"function `getDeviceSwitchPortsStatusesPackets` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":7231,"byte_end":7266,"line_start":263,"line_end":263,"column_start":10,"column_end":45,"is_primary":true,"text":[{"text":"async fn getDeviceSwitchPortsStatusesPackets() -> Result<(), Box<dyn std::error::Error>> {","highlight_start":10,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":7231,"byte_end":7266,"line_start":263,"line_end":263,"column_start":10,"column_end":45,"is_primary":true,"text":[{"text":"async fn getDeviceSwitchPortsStatusesPackets() -> Result<(), Box<dyn std::error::Error>> {","highlight_start":10,"highlight_end":45}],"label":null,"suggested_replacement":"get_device_switch_ports_statuses_packets","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function `getDeviceSwitchPortsStatusesPackets` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:263:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m263\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0masync fn getDeviceSwitchPortsStatusesPackets() -> Result<(), Box<dyn std::error::Error>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `get_device_switch_ports_statuses_packets`\u001b[0m\n\n"}
{"message":"function `getNetworkSwitchSettings` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":7879,"byte_end":7903,"line_start":285,"line_end":285,"column_start":10,"column_end":34,"is_primary":true,"text":[{"text":"async fn getNetworkSwitchSettings() -> Result<(), Box<dyn std::error::Error>> {","highlight_start":10,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":7879,"byte_end":7903,"line_start":285,"line_end":285,"column_start":10,"column_end":34,"is_primary":true,"text":[{"text":"async fn getNetworkSwitchSettings() -> Result<(), Box<dyn std::error::Error>> {","highlight_start":10,"highlight_end":34}],"label":null,"suggested_replacement":"get_network_switch_settings","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function `getNetworkSwitchSettings` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:285:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m285\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0masync fn getNetworkSwitchSettings() -> Result<(), Box<dyn std::error::Error>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `get_network_switch_settings`\u001b[0m\n\n"}
{"message":"function `getDeviceWirelessStatus` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":8514,"byte_end":8537,"line_start":307,"line_end":307,"column_start":10,"column_end":33,"is_primary":true,"text":[{"text":"async fn getDeviceWirelessStatus() -> Result<(), Box<dyn std::error::Error>> {","highlight_start":10,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":8514,"byte_end":8537,"line_start":307,"line_end":307,"column_start":10,"column_end":33,"is_primary":true,"text":[{"text":"async fn getDeviceWirelessStatus() -> Result<(), Box<dyn std::error::Error>> {","highlight_start":10,"highlight_end":33}],"label":null,"suggested_replacement":"get_device_wireless_status","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function `getDeviceWirelessStatus` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:307:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m307\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0masync fn getDeviceWirelessStatus() -> Result<(), Box<dyn std::error::Error>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `get_device_wireless_status`\u001b[0m\n\n"}
{"message":"function `getAdministeredIdentitiesMe` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":9142,"byte_end":9169,"line_start":329,"line_end":329,"column_start":10,"column_end":37,"is_primary":true,"text":[{"text":"async fn getAdministeredIdentitiesMe() -> Result<(), Box<dyn std::error::Error>> {","highlight_start":10,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":9142,"byte_end":9169,"line_start":329,"line_end":329,"column_start":10,"column_end":37,"is_primary":true,"text":[{"text":"async fn getAdministeredIdentitiesMe() -> Result<(), Box<dyn std::error::Error>> {","highlight_start":10,"highlight_end":37}],"label":null,"suggested_replacement":"get_administered_identities_me","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function `getAdministeredIdentitiesMe` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:329:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m329\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0masync fn getAdministeredIdentitiesMe() -> Result<(), Box<dyn std::error::Error>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `get_administered_identities_me`\u001b[0m\n\n"}
{"message":"function `getDeviceApplianceDhcpSubnets` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":9737,"byte_end":9766,"line_start":349,"line_end":349,"column_start":10,"column_end":39,"is_primary":true,"text":[{"text":"async fn getDeviceApplianceDhcpSubnets() -> Result<(), Box<dyn std::error::Error>> {","highlight_start":10,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":9737,"byte_end":9766,"line_start":349,"line_end":349,"column_start":10,"column_end":39,"is_primary":true,"text":[{"text":"async fn getDeviceApplianceDhcpSubnets() -> Result<(), Box<dyn std::error::Error>> {","highlight_start":10,"highlight_end":39}],"label":null,"suggested_replacement":"get_device_appliance_dhcp_subnets","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function `getDeviceApplianceDhcpSubnets` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:349:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m349\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0masync fn getDeviceApplianceDhcpSubnets() -> Result<(), Box<dyn std::error::Error>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `get_device_appliance_dhcp_subnets`\u001b[0m\n\n"}
{"message":"function `getDeviceAppliancePerformance` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":10381,"byte_end":10410,"line_start":371,"line_end":371,"column_start":10,"column_end":39,"is_primary":true,"text":[{"text":"async fn getDeviceAppliancePerformance() -> Result<(), Box<dyn std::error::Error>> {","highlight_start":10,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":10381,"byte_end":10410,"line_start":371,"line_end":371,"column_start":10,"column_end":39,"is_primary":true,"text":[{"text":"async fn getDeviceAppliancePerformance() -> Result<(), Box<dyn std::error::Error>> {","highlight_start":10,"highlight_end":39}],"label":null,"suggested_replacement":"get_device_appliance_performance","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function `getDeviceAppliancePerformance` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:371:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m371\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0masync fn getDeviceAppliancePerformance() -> Result<(), Box<dyn std::error::Error>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `get_device_appliance_performance`\u001b[0m\n\n"}
{"message":"function `getDeviceAppliancePrefixesDelegated` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":11034,"byte_end":11069,"line_start":393,"line_end":393,"column_start":10,"column_end":45,"is_primary":true,"text":[{"text":"async fn getDeviceAppliancePrefixesDelegated() -> Result<(), Box<dyn std::error::Error>> {","highlight_start":10,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":11034,"byte_end":11069,"line_start":393,"line_end":393,"column_start":10,"column_end":45,"is_primary":true,"text":[{"text":"async fn getDeviceAppliancePrefixesDelegated() -> Result<(), Box<dyn std::error::Error>> {","highlight_start":10,"highlight_end":45}],"label":null,"suggested_replacement":"get_device_appliance_prefixes_delegated","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function `getDeviceAppliancePrefixesDelegated` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:393:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m393\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0masync fn getDeviceAppliancePrefixesDelegated() -> Result<(), Box<dyn std::error::Error>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `get_device_appliance_prefixes_delegated`\u001b[0m\n\n"}
{"message":"function `getDeviceAppliancePrefixesDelegatedVlanAssignments` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":11712,"byte_end":11762,"line_start":415,"line_end":415,"column_start":10,"column_end":60,"is_primary":true,"text":[{"text":"async fn getDeviceAppliancePrefixesDelegatedVlanAssignments() -> Result<(), Box<dyn std::error::Error>> {","highlight_start":10,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":11712,"byte_end":11762,"line_start":415,"line_end":415,"column_start":10,"column_end":60,"is_primary":true,"text":[{"text":"async fn getDeviceAppliancePrefixesDelegatedVlanAssignments() -> Result<(), Box<dyn std::error::Error>> {","highlight_start":10,"highlight_end":60}],"label":null,"suggested_replacement":"get_device_appliance_prefixes_delegated_vlan_assignments","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function `getDeviceAppliancePrefixesDelegatedVlanAssignments` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:415:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m415\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0masync fn getDeviceAppliancePrefixesDelegatedVlanAssignments() -> Result<(), Box<dyn std::error::Error>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `get_device_appliance_prefixes_delegated_vlan_assignments`\u001b[0m\n\n"}
{"message":"function `updateDevice` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":12388,"byte_end":12400,"line_start":437,"line_end":437,"column_start":10,"column_end":22,"is_primary":true,"text":[{"text":"async fn updateDevice() -> Result<(), Box<dyn std::error::Error>> {","highlight_start":10,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":12388,"byte_end":12400,"line_start":437,"line_end":437,"column_start":10,"column_end":22,"is_primary":true,"text":[{"text":"async fn updateDevice() -> Result<(), Box<dyn std::error::Error>> {","highlight_start":10,"highlight_end":22}],"label":null,"suggested_replacement":"update_device","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function `updateDevice` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:437:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m437\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0masync fn updateDevice() -> Result<(), Box<dyn std::error::Error>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `update_device`\u001b[0m\n\n"}
{"message":"function `getOrganizationApplianceVpnStatuses` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":13533,"byte_end":13568,"line_start":479,"line_end":479,"column_start":10,"column_end":45,"is_primary":true,"text":[{"text":"async fn getOrganizationApplianceVpnStatuses() -> Result<(), Box<dyn std::error::Error>> {","highlight_start":10,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":13533,"byte_end":13568,"line_start":479,"line_end":479,"column_start":10,"column_end":45,"is_primary":true,"text":[{"text":"async fn getOrganizationApplianceVpnStatuses() -> Result<(), Box<dyn std::error::Error>> {","highlight_start":10,"highlight_end":45}],"label":null,"suggested_replacement":"get_organization_appliance_vpn_statuses","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function `getOrganizationApplianceVpnStatuses` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:479:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m479\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0masync fn getOrganizationApplianceVpnStatuses() -> Result<(), Box<dyn std::error::Error>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `get_organization_appliance_vpn_statuses`\u001b[0m\n\n"}
{"message":"function `getOrganizationApplianceVpnStats` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":14206,"byte_end":14238,"line_start":501,"line_end":501,"column_start":10,"column_end":42,"is_primary":true,"text":[{"text":"async fn getOrganizationApplianceVpnStats() -> Result<(), Box<dyn std::error::Error>> {","highlight_start":10,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":14206,"byte_end":14238,"line_start":501,"line_end":501,"column_start":10,"column_end":42,"is_primary":true,"text":[{"text":"async fn getOrganizationApplianceVpnStats() -> Result<(), Box<dyn std::error::Error>> {","highlight_start":10,"highlight_end":42}],"label":null,"suggested_replacement":"get_organization_appliance_vpn_stats","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function `getOrganizationApplianceVpnStats` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:501:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m501\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0masync fn getOrganizationApplianceVpnStats() -> Result<(), Box<dyn std::error::Error>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `get_organization_appliance_vpn_stats`\u001b[0m\n\n"}
{"message":"function `getNetworkWirelessSsidVpn` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":14854,"byte_end":14879,"line_start":523,"line_end":523,"column_start":10,"column_end":35,"is_primary":true,"text":[{"text":"async fn getNetworkWirelessSsidVpn() -> Result<(), Box<dyn std::error::Error>> {","highlight_start":10,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":14854,"byte_end":14879,"line_start":523,"line_end":523,"column_start":10,"column_end":35,"is_primary":true,"text":[{"text":"async fn getNetworkWirelessSsidVpn() -> Result<(), Box<dyn std::error::Error>> {","highlight_start":10,"highlight_end":35}],"label":null,"suggested_replacement":"get_network_wireless_ssid_vpn","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function `getNetworkWirelessSsidVpn` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:523:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m523\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0masync fn getNetworkWirelessSsidVpn() -> Result<(), Box<dyn std::error::Error>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `get_network_wireless_ssid_vpn`\u001b[0m\n\n"}
{"message":"function `updateNetworkWirelessSsidVpn` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":15499,"byte_end":15527,"line_start":545,"line_end":545,"column_start":10,"column_end":38,"is_primary":true,"text":[{"text":"async fn updateNetworkWirelessSsidVpn() -> Result<(), Box<dyn std::error::Error>> {","highlight_start":10,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":15499,"byte_end":15527,"line_start":545,"line_end":545,"column_start":10,"column_end":38,"is_primary":true,"text":[{"text":"async fn updateNetworkWirelessSsidVpn() -> Result<(), Box<dyn std::error::Error>> {","highlight_start":10,"highlight_end":38}],"label":null,"suggested_replacement":"update_network_wireless_ssid_vpn","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function `updateNetworkWirelessSsidVpn` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:545:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m545\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0masync fn updateNetworkWirelessSsidVpn() -> Result<(), Box<dyn std::error::Error>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `update_network_wireless_ssid_vpn`\u001b[0m\n\n"}
{"message":"function `getOrganizationApplianceVpnVpnFirewallRules` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":17263,"byte_end":17306,"line_start":603,"line_end":603,"column_start":10,"column_end":53,"is_primary":true,"text":[{"text":"async fn getOrganizationApplianceVpnVpnFirewallRules() -> Result<(), Box<dyn std::error::Error>> {","highlight_start":10,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":17263,"byte_end":17306,"line_start":603,"line_end":603,"column_start":10,"column_end":53,"is_primary":true,"text":[{"text":"async fn getOrganizationApplianceVpnVpnFirewallRules() -> Result<(), Box<dyn std::error::Error>> {","highlight_start":10,"highlight_end":53}],"label":null,"suggested_replacement":"get_organization_appliance_vpn_vpn_firewall_rules","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function `getOrganizationApplianceVpnVpnFirewallRules` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:603:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m603\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0masync fn getOrganizationApplianceVpnVpnFirewallRules() -> Result<(), Box<dyn std::error::Error>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `get_organization_appliance_vpn_vpn_firewall_rules`\u001b[0m\n\n"}
{"message":"function `getNetworkApplianceVlans` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":17932,"byte_end":17956,"line_start":625,"line_end":625,"column_start":10,"column_end":34,"is_primary":true,"text":[{"text":"async fn getNetworkApplianceVlans() -> Result<(), Box<dyn std::error::Error>> {","highlight_start":10,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":17932,"byte_end":17956,"line_start":625,"line_end":625,"column_start":10,"column_end":34,"is_primary":true,"text":[{"text":"async fn getNetworkApplianceVlans() -> Result<(), Box<dyn std::error::Error>> {","highlight_start":10,"highlight_end":34}],"label":null,"suggested_replacement":"get_network_appliance_vlans","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function `getNetworkApplianceVlans` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:625:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m625\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0masync fn getNetworkApplianceVlans() -> Result<(), Box<dyn std::error::Error>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `get_network_appliance_vlans`\u001b[0m\n\n"}
{"message":"function `getOrganizationApplianceUplinkStatuses` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":18609,"byte_end":18647,"line_start":647,"line_end":647,"column_start":10,"column_end":48,"is_primary":true,"text":[{"text":"async fn getOrganizationApplianceUplinkStatuses() -> Result<(), Box<dyn std::error::Error>> {","highlight_start":10,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":18609,"byte_end":18647,"line_start":647,"line_end":647,"column_start":10,"column_end":48,"is_primary":true,"text":[{"text":"async fn getOrganizationApplianceUplinkStatuses() -> Result<(), Box<dyn std::error::Error>> {","highlight_start":10,"highlight_end":48}],"label":null,"suggested_replacement":"get_organization_appliance_uplink_statuses","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function `getOrganizationApplianceUplinkStatuses` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:647:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m647\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0masync fn getOrganizationApplianceUplinkStatuses() -> Result<(), Box<dyn std::error::Error>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `get_organization_appliance_uplink_statuses`\u001b[0m\n\n"}
{"message":"function `getNetworkWirelessSettings` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":19277,"byte_end":19303,"line_start":669,"line_end":669,"column_start":10,"column_end":36,"is_primary":true,"text":[{"text":"async fn getNetworkWirelessSettings() -> Result<(), Box<dyn std::error::Error>> {","highlight_start":10,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":19277,"byte_end":19303,"line_start":669,"line_end":669,"column_start":10,"column_end":36,"is_primary":true,"text":[{"text":"async fn getNetworkWirelessSettings() -> Result<(), Box<dyn std::error::Error>> {","highlight_start":10,"highlight_end":36}],"label":null,"suggested_replacement":"get_network_wireless_settings","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function `getNetworkWirelessSettings` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:669:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m669\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0masync fn getNetworkWirelessSettings() -> Result<(), Box<dyn std::error::Error>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `get_network_wireless_settings`\u001b[0m\n\n"}
{"message":"function `updateNetworkWirelessSettings` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":19915,"byte_end":19944,"line_start":691,"line_end":691,"column_start":10,"column_end":39,"is_primary":true,"text":[{"text":"async fn updateNetworkWirelessSettings() -> Result<(), Box<dyn std::error::Error>> {","highlight_start":10,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":19915,"byte_end":19944,"line_start":691,"line_end":691,"column_start":10,"column_end":39,"is_primary":true,"text":[{"text":"async fn updateNetworkWirelessSettings() -> Result<(), Box<dyn std::error::Error>> {","highlight_start":10,"highlight_end":39}],"label":null,"suggested_replacement":"update_network_wireless_settings","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function `updateNetworkWirelessSettings` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:691:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m691\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0masync fn updateNetworkWirelessSettings() -> Result<(), Box<dyn std::error::Error>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `update_network_wireless_settings`\u001b[0m\n\n"}
{"message":"function `getOrganizationWirelessDevicesChannelUtilizationByNetwork` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":21014,"byte_end":21071,"line_start":726,"line_end":726,"column_start":10,"column_end":67,"is_primary":true,"text":[{"text":"async fn getOrganizationWirelessDevicesChannelUtilizationByNetwork() -> Result<(), Box<dyn std::error::Error>> {","highlight_start":10,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":21014,"byte_end":21071,"line_start":726,"line_end":726,"column_start":10,"column_end":67,"is_primary":true,"text":[{"text":"async fn getOrganizationWirelessDevicesChannelUtilizationByNetwork() -> Result<(), Box<dyn std::error::Error>> {","highlight_start":10,"highlight_end":67}],"label":null,"suggested_replacement":"get_organization_wireless_devices_channel_utilization_by_network","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function `getOrganizationWirelessDevicesChannelUtilizationByNetwork` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:726:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m726\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0masync fn getOrganizationWirelessDevicesChannelUtilizationByNetwork() -> Result<(), Box<dyn std::error::Error>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `get_organization_wireless_devices_channel_utilization_by_network`\u001b[0m\n\n"}
{"message":"function `getOrganizationDevicesStatusesOverview` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":21724,"byte_end":21762,"line_start":748,"line_end":748,"column_start":10,"column_end":48,"is_primary":true,"text":[{"text":"async fn getOrganizationDevicesStatusesOverview() -> Result<(), Box<dyn std::error::Error>> {","highlight_start":10,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":21724,"byte_end":21762,"line_start":748,"line_end":748,"column_start":10,"column_end":48,"is_primary":true,"text":[{"text":"async fn getOrganizationDevicesStatusesOverview() -> Result<(), Box<dyn std::error::Error>> {","highlight_start":10,"highlight_end":48}],"label":null,"suggested_replacement":"get_organization_devices_statuses_overview","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function `getOrganizationDevicesStatusesOverview` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:748:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m748\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0masync fn getOrganizationDevicesStatusesOverview() -> Result<(), Box<dyn std::error::Error>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `get_organization_devices_statuses_overview`\u001b[0m\n\n"}
{"message":"function `getOrganizationDevicesStatuses` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":22408,"byte_end":22438,"line_start":770,"line_end":770,"column_start":10,"column_end":40,"is_primary":true,"text":[{"text":"async fn getOrganizationDevicesStatuses() -> Result<(), Box<dyn std::error::Error>> {","highlight_start":10,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":22408,"byte_end":22438,"line_start":770,"line_end":770,"column_start":10,"column_end":40,"is_primary":true,"text":[{"text":"async fn getOrganizationDevicesStatuses() -> Result<(), Box<dyn std::error::Error>> {","highlight_start":10,"highlight_end":40}],"label":null,"suggested_replacement":"get_organization_devices_statuses","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function `getOrganizationDevicesStatuses` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:770:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m770\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0masync fn getOrganizationDevicesStatuses() -> Result<(), Box<dyn std::error::Error>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `get_organization_devices_statuses`\u001b[0m\n\n"}
{"message":"function `getOrganizationDevicesUplinksAddressesByDevice` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":23081,"byte_end":23127,"line_start":792,"line_end":792,"column_start":10,"column_end":56,"is_primary":true,"text":[{"text":"async fn getOrganizationDevicesUplinksAddressesByDevice() -> Result<(), Box<dyn std::error::Error>> {","highlight_start":10,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":23081,"byte_end":23127,"line_start":792,"line_end":792,"column_start":10,"column_end":56,"is_primary":true,"text":[{"text":"async fn getOrganizationDevicesUplinksAddressesByDevice() -> Result<(), Box<dyn std::error::Error>> {","highlight_start":10,"highlight_end":56}],"label":null,"suggested_replacement":"get_organization_devices_uplinks_addresses_by_device","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function `getOrganizationDevicesUplinksAddressesByDevice` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:792:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m792\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0masync fn getOrganizationDevicesUplinksAddressesByDevice() -> Result<(), Box<dyn std::error::Error>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `get_organization_devices_uplinks_addresses_by_device`\u001b[0m\n\n"}
{"message":"function `getOrganizationDevicesUplinksLossAndLatency` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":23820,"byte_end":23863,"line_start":814,"line_end":814,"column_start":10,"column_end":53,"is_primary":true,"text":[{"text":"async fn getOrganizationDevicesUplinksLossAndLatency() -> Result<(), Box<dyn std::error::Error>> {","highlight_start":10,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":23820,"byte_end":23863,"line_start":814,"line_end":814,"column_start":10,"column_end":53,"is_primary":true,"text":[{"text":"async fn getOrganizationDevicesUplinksLossAndLatency() -> Result<(), Box<dyn std::error::Error>> {","highlight_start":10,"highlight_end":53}],"label":null,"suggested_replacement":"get_organization_devices_uplinks_loss_and_latency","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function `getOrganizationDevicesUplinksLossAndLatency` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:814:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m814\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0masync fn getOrganizationDevicesUplinksLossAndLatency() -> Result<(), Box<dyn std::error::Error>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `get_organization_devices_uplinks_loss_and_latency`\u001b[0m\n\n"}
{"message":"function `getOrganizationDevicesProvisioningStatuses` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":24528,"byte_end":24570,"line_start":836,"line_end":836,"column_start":10,"column_end":52,"is_primary":true,"text":[{"text":"async fn getOrganizationDevicesProvisioningStatuses() -> Result<(), Box<dyn std::error::Error>> {","highlight_start":10,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":24528,"byte_end":24570,"line_start":836,"line_end":836,"column_start":10,"column_end":52,"is_primary":true,"text":[{"text":"async fn getOrganizationDevicesProvisioningStatuses() -> Result<(), Box<dyn std::error::Error>> {","highlight_start":10,"highlight_end":52}],"label":null,"suggested_replacement":"get_organization_devices_provisioning_statuses","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function `getOrganizationDevicesProvisioningStatuses` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:836:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m836\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0masync fn getOrganizationDevicesProvisioningStatuses() -> Result<(), Box<dyn std::error::Error>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `get_organization_devices_provisioning_statuses`\u001b[0m\n\n"}
{"message":"function `getOrganizationDevicesPowerModulesStatusesByDevice` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":25226,"byte_end":25276,"line_start":858,"line_end":858,"column_start":10,"column_end":60,"is_primary":true,"text":[{"text":"async fn getOrganizationDevicesPowerModulesStatusesByDevice() -> Result<(), Box<dyn std::error::Error>> {","highlight_start":10,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":25226,"byte_end":25276,"line_start":858,"line_end":858,"column_start":10,"column_end":60,"is_primary":true,"text":[{"text":"async fn getOrganizationDevicesPowerModulesStatusesByDevice() -> Result<(), Box<dyn std::error::Error>> {","highlight_start":10,"highlight_end":60}],"label":null,"suggested_replacement":"get_organization_devices_power_modules_statuses_by_device","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function `getOrganizationDevicesPowerModulesStatusesByDevice` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:858:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m858\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0masync fn getOrganizationDevicesPowerModulesStatusesByDevice() -> Result<(), Box<dyn std::error::Error>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `get_organization_devices_power_modules_statuses_by_device`\u001b[0m\n\n"}
{"message":"function `getOrganizationDevicesAvailabilities` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":25941,"byte_end":25977,"line_start":880,"line_end":880,"column_start":10,"column_end":46,"is_primary":true,"text":[{"text":"async fn getOrganizationDevicesAvailabilities() -> Result<(), Box<dyn std::error::Error>> {","highlight_start":10,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":25941,"byte_end":25977,"line_start":880,"line_end":880,"column_start":10,"column_end":46,"is_primary":true,"text":[{"text":"async fn getOrganizationDevicesAvailabilities() -> Result<(), Box<dyn std::error::Error>> {","highlight_start":10,"highlight_end":46}],"label":null,"suggested_replacement":"get_organization_devices_availabilities","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function `getOrganizationDevicesAvailabilities` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:880:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m880\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0masync fn getOrganizationDevicesAvailabilities() -> Result<(), Box<dyn std::error::Error>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `get_organization_devices_availabilities`\u001b[0m\n\n"}
{"message":"function `getOrganizationWirelessDevicesEthernetStatuses` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":26682,"byte_end":26728,"line_start":902,"line_end":902,"column_start":10,"column_end":56,"is_primary":true,"text":[{"text":"async fn getOrganizationWirelessDevicesEthernetStatuses() -> Result<(), Box<dyn std::error::Error>> {","highlight_start":10,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":26682,"byte_end":26728,"line_start":902,"line_end":902,"column_start":10,"column_end":56,"is_primary":true,"text":[{"text":"async fn getOrganizationWirelessDevicesEthernetStatuses() -> Result<(), Box<dyn std::error::Error>> {","highlight_start":10,"highlight_end":56}],"label":null,"suggested_replacement":"get_organization_wireless_devices_ethernet_statuses","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function `getOrganizationWirelessDevicesEthernetStatuses` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:902:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m902\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0masync fn getOrganizationWirelessDevicesEthernetStatuses() -> Result<(), Box<dyn std::error::Error>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `get_organization_wireless_devices_ethernet_statuses`\u001b[0m\n\n"}
{"message":"function `getNetworkWirelessLatencyHistory` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":27407,"byte_end":27439,"line_start":924,"line_end":924,"column_start":10,"column_end":42,"is_primary":true,"text":[{"text":"async fn getNetworkWirelessLatencyHistory() -> Result<(), Box<dyn std::error::Error>> {","highlight_start":10,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":27407,"byte_end":27439,"line_start":924,"line_end":924,"column_start":10,"column_end":42,"is_primary":true,"text":[{"text":"async fn getNetworkWirelessLatencyHistory() -> Result<(), Box<dyn std::error::Error>> {","highlight_start":10,"highlight_end":42}],"label":null,"suggested_replacement":"get_network_wireless_latency_history","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function `getNetworkWirelessLatencyHistory` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:924:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m924\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0masync fn getNetworkWirelessLatencyHistory() -> Result<(), Box<dyn std::error::Error>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `get_network_wireless_latency_history`\u001b[0m\n\n"}
{"message":"47 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 47 warnings emitted\u001b[0m\n\n"}
